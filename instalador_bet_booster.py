#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ BET BOOSTER - INSTALADOR OFICIAL
Sistema Avan√ßado de An√°lise de Apostas Esportivas
Instalador com Interface Gr√°fica Detalhada
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import subprocess
import sys
import os
import threading
import time
from datetime import datetime

class BetBoosterInstaller:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("üéØ BET BOOSTER - INSTALADOR OFICIAL")
        self.root.geometry("800x600")
        self.root.resizable(False, False)
        
        # Centralizar janela
        self.center_window()
        
        # Configurar cores e estilo
        self.setup_styles()
        
        # Estado da instala√ß√£o
        self.aceito_termos = tk.BooleanVar()
        self.instalacao_em_progresso = False
        
        # Criar interface
        self.create_welcome_screen()
    
    def center_window(self):
        """Centraliza a janela na tela"""
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() // 2) - (800 // 2)
        y = (self.root.winfo_screenheight() // 2) - (600 // 2)
        self.root.geometry(f"800x600+{x}+{y}")
    
    def setup_styles(self):
        """Configura cores e estilos"""
        self.root.configure(bg='#f0f0f0')
        
        # Cores
        self.cores = {
            'primary': '#1e40af',
            'success': '#10b981',
            'warning': '#f59e0b',
            'danger': '#ef4444',
            'dark': '#1f2937',
            'light': '#f8fafc'
        }
        
        # Configurar estilos ttk
        style = ttk.Style()
        style.configure('Title.TLabel', font=('Arial', 20, 'bold'), foreground=self.cores['primary'])
        style.configure('Header.TLabel', font=('Arial', 14, 'bold'), foreground=self.cores['dark'])
        style.configure('Body.TLabel', font=('Arial', 11), foreground=self.cores['dark'])
        style.configure('Success.TLabel', font=('Arial', 12, 'bold'), foreground=self.cores['success'])
        style.configure('Primary.TButton', font=('Arial', 12, 'bold'))
    
    def create_welcome_screen(self):
        """Cria a tela de boas-vindas e informa√ß√µes"""
        # Frame principal
        main_frame = tk.Frame(self.root, bg='#f0f0f0')
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Header com logo/t√≠tulo
        header_frame = tk.Frame(main_frame, bg='#f0f0f0')
        header_frame.pack(fill='x', pady=(0, 20))
        
        title_label = ttk.Label(header_frame, text="üéØ BET BOOSTER", style='Title.TLabel')
        title_label.pack()
        
        subtitle_label = ttk.Label(header_frame, text="Sistema Avan√ßado de An√°lise de Apostas Esportivas", style='Header.TLabel')
        subtitle_label.pack(pady=(5, 0))
        
        version_label = ttk.Label(header_frame, text="Vers√£o 2.0 - Edi√ß√£o Profissional", style='Body.TLabel')
        version_label.pack(pady=(5, 0))
        
        # √Årea de descri√ß√£o com scroll
        desc_frame = tk.LabelFrame(main_frame, text="üìã Sobre o Programa", font=('Arial', 12, 'bold'), 
                                  bg='#f0f0f0', fg=self.cores['primary'])
        desc_frame.pack(fill='both', expand=True, pady=(0, 20))
        
        desc_text = scrolledtext.ScrolledText(desc_frame, height=12, font=('Arial', 10), 
                                             wrap=tk.WORD, bg='white', relief='flat', bd=5)
        desc_text.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Texto descritivo
        descricao = """üöÄ O QUE √â O BET BOOSTER?

O Bet Booster √© um sistema profissional de an√°lise de apostas esportivas que utiliza modelos estat√≠sticos avan√ßados para calcular probabilidades reais de resultados em jogos de futebol.

üìä PRINCIPAIS FUNCIONALIDADES:

üéØ An√°lise Estat√≠stica Avan√ßada
   ‚Ä¢ Modelo matem√°tico baseado na Distribui√ß√£o de Poisson
   ‚Ä¢ C√°lculo de probabilidades para Over/Under, Gols, Escanteios
   ‚Ä¢ An√°lise de valor de apostas (Value Betting)
   ‚Ä¢ Compara√ß√£o autom√°tica com odds das casas

‚öΩ Base de Dados Completa
   ‚Ä¢ Integra√ß√£o com APIs de dados esportivos em tempo real
   ‚Ä¢ Dados do Radar Esportivo e SofaScore
   ‚Ä¢ Estat√≠sticas atualizadas de gols marcados/sofridos
   ‚Ä¢ Dados de mandante/visitante separados
   ‚Ä¢ Filtros por data e busca avan√ßada

üñ•Ô∏è Interface Profissional
   ‚Ä¢ 5 abas especializadas para diferentes an√°lises
   ‚Ä¢ Sistema de busca e filtros inteligentes
   ‚Ä¢ Sele√ß√£o m√∫ltipla de times e jogos
   ‚Ä¢ Calculadora de apostas m√∫ltiplas
   ‚Ä¢ Hist√≥rico e acompanhamento de resultados

üí∞ Ferramentas de Gest√£o
   ‚Ä¢ Calculadora de bankroll e stake
   ‚Ä¢ Controle de lucros e perdas
   ‚Ä¢ Sugest√µes de apostas de valor
   ‚Ä¢ Alertas de oportunidades

üîß RECURSOS T√âCNICOS:

‚úÖ F√°cil de usar - Interface intuitiva
‚úÖ R√°pido - C√°lculos instant√¢neos
‚úÖ Preciso - Modelos matematicamente validados
‚úÖ Atualizado - Dados em tempo real via API
‚úÖ Completo - Tudo que voc√™ precisa em um s√≥ lugar
‚úÖ Seguro - Dados salvos localmente

üì¶ DEPEND√äNCIAS INSTALADAS:

‚Ä¢ Python 3.6+ (obrigat√≥rio)
‚Ä¢ requests>=2.32.0 (para APIs de dados)
‚Ä¢ tkinter (interface gr√°fica - inclu√≠do no Python)
‚Ä¢ Bibliotecas padr√£o (json, datetime, threading, etc.)

üéì IDEAL PARA:

‚Ä¢ Apostadores iniciantes que querem aprender
‚Ä¢ Apostadores experientes buscando vantagem estat√≠stica
‚Ä¢ Analistas esportivos profissionais
‚Ä¢ Qualquer pessoa interessada em dados de futebol

‚ö†Ô∏è AVISO IMPORTANTE:
Este software √© destinado apenas para fins educacionais e de entretenimento. Apostas envolvem riscos financeiros. Aposte com responsabilidade.

üèÜ Desenvolvido por especialistas em an√°lise esportiva e programa√ß√£o."""

        desc_text.insert(tk.END, descricao)
        desc_text.configure(state='disabled')
        
        # Frame dos termos e bot√µes
        bottom_frame = tk.Frame(main_frame, bg='#f0f0f0')
        bottom_frame.pack(fill='x', side='bottom')
        
        # Checkbox dos termos
        terms_frame = tk.Frame(bottom_frame, bg='#f0f0f0')
        terms_frame.pack(pady=(10, 0))
        
        terms_check = tk.Checkbutton(terms_frame, text="Li e aceito os termos de uso e instala√ß√£o do programa", 
                                   variable=self.aceito_termos, font=('Arial', 11, 'bold'),
                                   bg='#f0f0f0', fg=self.cores['primary'])
        terms_check.pack()
        
        # Bot√µes
        buttons_frame = tk.Frame(bottom_frame, bg='#f0f0f0')
        buttons_frame.pack(pady=(15, 0))
        
        cancel_btn = tk.Button(buttons_frame, text="‚ùå Cancelar", font=('Arial', 12, 'bold'),
                              bg=self.cores['danger'], fg='white', padx=20, pady=8,
                              command=self.cancelar_instalacao)
        cancel_btn.pack(side='left', padx=(0, 10))
        
        install_btn = tk.Button(buttons_frame, text="üöÄ ACEITAR E INSTALAR", font=('Arial', 12, 'bold'),
                               bg=self.cores['success'], fg='white', padx=30, pady=8,
                               command=self.iniciar_instalacao)
        install_btn.pack(side='right')
    
    def cancelar_instalacao(self):
        """Cancela a instala√ß√£o"""
        if messagebox.askyesno("Cancelar", "Tem certeza que deseja cancelar a instala√ß√£o?"):
            self.root.quit()
    
    def iniciar_instalacao(self):
        """Inicia o processo de instala√ß√£o"""
        if not self.aceito_termos.get():
            messagebox.showwarning("Termos", "Voc√™ deve aceitar os termos para prosseguir com a instala√ß√£o!")
            return
        
        if self.instalacao_em_progresso:
            return
        
        # Confirmar instala√ß√£o
        if not messagebox.askyesno("Confirma√ß√£o", 
                                  "Iniciar a instala√ß√£o do Bet Booster?\n\n" +
                                  "O programa ir√°:\n" +
                                  "‚Ä¢ Verificar depend√™ncias do Python\n" +
                                  "‚Ä¢ Instalar bibliotecas necess√°rias\n" +
                                  "‚Ä¢ Criar atalho na √°rea de trabalho\n" +
                                  "‚Ä¢ Configurar o ambiente"):
            return
        
        self.create_installation_screen()
    
    def create_installation_screen(self):
        """Cria a tela de instala√ß√£o"""
        # Limpar tela
        for widget in self.root.winfo_children():
            widget.destroy()
        
        # Frame principal
        main_frame = tk.Frame(self.root, bg='#f0f0f0')
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # T√≠tulo
        title_label = ttk.Label(main_frame, text="üîß INSTALANDO BET BOOSTER", style='Title.TLabel')
        title_label.pack(pady=(0, 20))
        
        # Progress frame
        progress_frame = tk.LabelFrame(main_frame, text="Progresso da Instala√ß√£o", 
                                     font=('Arial', 12, 'bold'), bg='#f0f0f0')
        progress_frame.pack(fill='x', pady=(0, 20))
        
        # Barra de progresso
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(progress_frame, variable=self.progress_var, 
                                          maximum=100, length=500)
        self.progress_bar.pack(pady=10, padx=20)
        
        # Label de status
        self.status_label = ttk.Label(progress_frame, text="Preparando instala√ß√£o...", 
                                     style='Body.TLabel')
        self.status_label.pack(pady=(0, 10))
        
        # Log de instala√ß√£o
        log_frame = tk.LabelFrame(main_frame, text="Log de Instala√ß√£o", 
                                font=('Arial', 12, 'bold'), bg='#f0f0f0')
        log_frame.pack(fill='both', expand=True, pady=(0, 20))
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=15, font=('Consolas', 9), 
                                                bg='#1f2937', fg='#10b981', insertbackground='#10b981')
        self.log_text.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Iniciar instala√ß√£o em thread separada
        self.instalacao_em_progresso = True
        threading.Thread(target=self.executar_instalacao, daemon=True).start()
    
    def log_message(self, message):
        """Adiciona mensagem ao log"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.log_text.see(tk.END)
        self.root.update()
    
    def update_progress(self, value, status):
        """Atualiza barra de progresso e status"""
        self.progress_var.set(value)
        self.status_label.config(text=status)
        self.root.update()
    
    def executar_instalacao(self):
        """Executa o processo completo de instala√ß√£o"""
        try:
            steps = [
                (10, "Verificando vers√£o do Python..."),
                (20, "Verificando depend√™ncias b√°sicas..."),
                (40, "Instalando bibliotecas do requirements.txt..."),
                (60, "Configurando ambiente e APIs..."),
                (75, "Criando atalho na √°rea de trabalho..."),
                (90, "Finalizando configura√ß√£o..."),
                (100, "Instala√ß√£o conclu√≠da!")
            ]
            
            for progress, status in steps:
                self.update_progress(progress, status)
                
                if progress == 10:
                    self.verificar_python()
                elif progress == 20:
                    self.verificar_dependencias()
                elif progress == 40:
                    self.instalar_bibliotecas()
                elif progress == 60:
                    self.configurar_ambiente()
                elif progress == 75:
                    self.criar_atalho_desktop()
                elif progress == 90:
                    self.finalizar_configuracao()
                
                time.sleep(1)
            
            self.instalacao_concluida()
            
        except Exception as e:
            self.instalacao_falhou(str(e))
    
    def verificar_python(self):
        """Verifica a vers√£o do Python"""
        self.log_message(f"üêç Python {sys.version}")
        
        if sys.version_info < (3, 6):
            raise Exception("Python 3.6+ √© necess√°rio!")
        
        self.log_message("‚úÖ Vers√£o do Python compat√≠vel")
    
    def verificar_dependencias(self):
        """Verifica depend√™ncias b√°sicas"""
        self.log_message("üîç Verificando depend√™ncias b√°sicas...")
        
        # Verificar tkinter (GUI)
        try:
            import tkinter
            self.log_message("‚úÖ tkinter encontrado")
        except ImportError:
            raise Exception("tkinter n√£o est√° dispon√≠vel - necess√°rio para a interface gr√°fica")
        
        # Verificar requests (API calls)
        try:
            import requests
            self.log_message(f"‚úÖ requests encontrado (vers√£o: {requests.__version__})")
        except ImportError:
            self.log_message("‚ö†Ô∏è  requests n√£o encontrado - ser√° instalado")
        
        # Verificar outras depend√™ncias padr√£o do Python
        deps_padrao = ['json', 'datetime', 'os', 'threading', 'math', 'sys']
        for dep in deps_padrao:
            try:
                __import__(dep)
                self.log_message(f"‚úÖ {dep} dispon√≠vel")
            except ImportError:
                self.log_message(f"‚ùå {dep} n√£o encontrado (biblioteca padr√£o)")
        
        self.log_message("‚úÖ Verifica√ß√£o de depend√™ncias conclu√≠da")
    
    def instalar_bibliotecas(self):
        """Instala bibliotecas necess√°rias"""
        self.log_message("üì¶ Instalando bibliotecas necess√°rias...")
        
        # Verificar se requirements.txt existe
        pasta_atual = os.path.dirname(os.path.abspath(__file__))
        requirements_path = os.path.join(pasta_atual, 'docs', 'requirements.txt')
        
        if os.path.exists(requirements_path):
            self.log_message(f"üìã Arquivo requirements.txt encontrado: {requirements_path}")
            try:
                self.log_message("üì• Instalando depend√™ncias do requirements.txt...")
                result = subprocess.run([
                    sys.executable, "-m", "pip", "install", "-r", requirements_path
                ], capture_output=True, text=True, timeout=300)
                
                if result.returncode == 0:
                    self.log_message("‚úÖ Depend√™ncias do requirements.txt instaladas com sucesso")
                    self.log_message(f"üìù Output: {result.stdout[:200]}...")
                else:
                    self.log_message(f"‚ö†Ô∏è  Aviso ao instalar requirements: {result.stderr[:200]}...")
                    # Tentar instala√ß√£o individual das depend√™ncias cr√≠ticas
                    self.instalar_dependencias_individuais()
                    
            except subprocess.TimeoutExpired:
                self.log_message("‚è±Ô∏è  Timeout na instala√ß√£o - continuando com instala√ß√£o individual...")
                self.instalar_dependencias_individuais()
            except Exception as e:
                self.log_message(f"‚ùå Erro ao instalar requirements: {e}")
                self.instalar_dependencias_individuais()
        else:
            self.log_message("‚ö†Ô∏è  requirements.txt n√£o encontrado - instalando depend√™ncias essenciais...")
            self.instalar_dependencias_individuais()
    
    def instalar_dependencias_individuais(self):
        """Instala depend√™ncias uma por uma"""
        self.log_message("üîÑ Instalando depend√™ncias individuais...")
        
        # Lista de bibliotecas essenciais para o Bet Booster
        bibliotecas_essenciais = [
            'requests>=2.32.0',  # Para APIs de dados esportivos
        ]
        
        # Lista de bibliotecas opcionais para funcionalidades extras
        bibliotecas_opcionais = [
            'pywin32',  # Para funcionalidades Windows (atalhos)
            'winshell'  # Para manipula√ß√£o de shell Windows
        ]
        
        # Instalar bibliotecas essenciais
        for lib in bibliotecas_essenciais:
            try:
                self.log_message(f"üì• Instalando biblioteca essencial: {lib}...")
                result = subprocess.run([
                    sys.executable, "-m", "pip", "install", lib
                ], capture_output=True, text=True, timeout=120)
                
                if result.returncode == 0:
                    self.log_message(f"‚úÖ {lib} instalado com sucesso")
                else:
                    self.log_message(f"‚ùå Erro ao instalar {lib}: {result.stderr[:100]}...")
                    raise Exception(f"Falha cr√≠tica ao instalar {lib}")
                    
            except subprocess.TimeoutExpired:
                self.log_message(f"‚è±Ô∏è  Timeout ao instalar {lib}")
                raise Exception(f"Timeout ao instalar depend√™ncia cr√≠tica: {lib}")
            except Exception as e:
                self.log_message(f"‚ùå Erro cr√≠tico ao instalar {lib}: {e}")
                raise e
        
        # Instalar bibliotecas opcionais (n√£o cr√≠ticas)
        for lib in bibliotecas_opcionais:
            try:
                self.log_message(f"üì• Instalando biblioteca opcional: {lib}...")
                result = subprocess.run([
                    sys.executable, "-m", "pip", "install", lib
                ], capture_output=True, text=True, timeout=60)
                
                if result.returncode == 0:
                    self.log_message(f"‚úÖ {lib} instalado com sucesso")
                else:
                    self.log_message(f"‚ö†Ô∏è  Aviso ao instalar {lib}: {result.stderr[:100]}...")
                    
            except subprocess.TimeoutExpired:
                self.log_message(f"‚è±Ô∏è  Timeout ao instalar {lib} (opcional)")
            except Exception as e:
                self.log_message(f"‚ö†Ô∏è  Aviso: {lib} (opcional) - {e}")
    
    def configurar_ambiente(self):
        """Configura o ambiente do programa"""
        self.log_message("‚öôÔ∏è  Configurando ambiente...")
        
        # Verificar se os arquivos principais existem
        arquivos_necessarios = [
            'src/interface_apostas.py',
            'api/radar_esportivo_api.py',
            'api/sofascore_api.py',
            'assets/bet-booster.ico',
            'docs/requirements.txt'
        ]
        
        pasta_atual = os.path.dirname(os.path.abspath(__file__))
        arquivos_encontrados = 0
        
        for arquivo in arquivos_necessarios:
            caminho = os.path.join(pasta_atual, arquivo)
            if os.path.exists(caminho):
                self.log_message(f"‚úÖ {arquivo} encontrado")
                arquivos_encontrados += 1
            else:
                self.log_message(f"‚ö†Ô∏è  {arquivo} n√£o encontrado")
        
        # Verificar se a estrutura m√≠nima est√° presente
        if arquivos_encontrados >= 2:  # Pelo menos interface principal e uma API
            self.log_message("‚úÖ Estrutura m√≠nima do projeto verificada")
        else:
            self.log_message("‚ö†Ô∏è  Estrutura incompleta - algumas funcionalidades podem n√£o funcionar")
        
        # Verificar se as depend√™ncias foram instaladas corretamente
        try:
            import requests
            self.log_message("‚úÖ requests verificado ap√≥s instala√ß√£o")
        except ImportError:
            self.log_message("‚ùå requests ainda n√£o est√° dispon√≠vel")
            raise Exception("Falha cr√≠tica: requests n√£o foi instalado corretamente")
        
        self.log_message("‚úÖ Ambiente configurado com sucesso")
    
    def criar_atalho_desktop(self):
        """Cria atalho na √°rea de trabalho"""
        self.log_message("üñ•Ô∏è Criando atalho na √°rea de trabalho...")
        
        # M√©todo principal: usar PowerShell para criar atalho .lnk
        if self.criar_atalho_powershell():
            return
        
        # M√©todo alternativo 1: criar arquivo .bat
        if self.criar_atalho_alternativo():
            return
        
        # M√©todo alternativo 2: criar script Python direto
        self.criar_atalho_python()
    
    def criar_atalho_powershell(self):
        """Cria atalho usando PowerShell (m√©todo mais confi√°vel)"""
        try:
            self.log_message("üîß Tentando criar atalho com PowerShell...")
            
            # Obter caminhos
            pasta_atual = os.path.dirname(os.path.abspath(__file__))
            script_principal = os.path.join(pasta_atual, 'src', 'interface_apostas.py')
            icone_path = os.path.join(pasta_atual, 'assets', 'bet-booster.ico')
            
            # Obter desktop path
            desktop_paths = [
                os.path.join(os.path.expanduser('~'), 'Desktop'),
                os.path.join(os.path.expanduser('~'), '√Årea de Trabalho'),
                os.path.join(os.path.expanduser('~'), 'OneDrive', 'Desktop'),
                os.path.join(os.path.expanduser('~'), 'OneDrive', '√Årea de Trabalho')
            ]
            
            desktop = None
            for path in desktop_paths:
                if os.path.exists(path):
                    desktop = path
                    break
            
            if not desktop:
                self.log_message("‚ö†Ô∏è  Pasta da √°rea de trabalho n√£o encontrada")
                return False
            
            atalho_path = os.path.join(desktop, "Bet Booster.lnk")
            
            # Script PowerShell para criar atalho
            powershell_script = f'''
$WshShell = New-Object -comObject WScript.Shell
$Shortcut = $WshShell.CreateShortcut("{atalho_path}")
$Shortcut.TargetPath = "{sys.executable}"
$Shortcut.Arguments = '"{script_principal}"'
$Shortcut.WorkingDirectory = "{pasta_atual}"
$Shortcut.Description = "Bet Booster - Sistema de An√°lise de Apostas"'''

            # Adicionar √≠cone se existir
            if os.path.exists(icone_path):
                powershell_script += f'\n$Shortcut.IconLocation = "{icone_path}"'
            
            powershell_script += '\n$Shortcut.Save()'
            
            # Executar PowerShell
            result = subprocess.run([
                'powershell', '-ExecutionPolicy', 'Bypass', '-Command', powershell_script
            ], capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0 and os.path.exists(atalho_path):
                self.log_message(f"‚úÖ Atalho criado com sucesso: {atalho_path}")
                return True
            else:
                self.log_message(f"‚ö†Ô∏è  PowerShell falhou: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            self.log_message("‚ö†Ô∏è  PowerShell demorou muito para responder")
            return False
        except Exception as e:
            self.log_message(f"‚ö†Ô∏è  Erro no PowerShell: {e}")
            return False
    
    def criar_atalho_alternativo(self):
        """Cria atalho alternativo usando arquivo .bat"""
        self.log_message("üîÑ Criando atalho alternativo (.bat)...")
        
        try:
            pasta_atual = os.path.dirname(os.path.abspath(__file__))
            script_principal = os.path.join(pasta_atual, 'src', 'interface_apostas.py')
            
            # Tentar diferentes caminhos para √°rea de trabalho
            desktop_paths = [
                os.path.join(os.path.expanduser('~'), 'Desktop'),
                os.path.join(os.path.expanduser('~'), '√Årea de Trabalho'),
                os.path.join(os.path.expanduser('~'), 'OneDrive', 'Desktop'),
                os.path.join(os.path.expanduser('~'), 'OneDrive', '√Årea de Trabalho'),
                os.path.expanduser('~')  # Fallback para pasta do usu√°rio
            ]
            
            desktop = None
            for path in desktop_paths:
                if os.path.exists(path):
                    desktop = path
                    break
            
            if not desktop:
                self.log_message("‚ùå Nenhuma pasta v√°lida encontrada")
                return False
            
            bat_path = os.path.join(desktop, "Bet Booster.bat")
            
            # Criar arquivo .bat melhorado
            bat_content = f'''@echo off
title Bet Booster - Sistema de An√°lise de Apostas
color 0A
echo.
echo  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
echo  ‚îÇ        üéØ BET BOOSTER                  ‚îÇ
echo  ‚îÇ   Sistema de An√°lise de Apostas        ‚îÇ
echo  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
echo.
echo ‚ö° Iniciando programa...
echo.

cd /d "{pasta_atual}"

if exist "{script_principal}" (
    echo ‚úÖ Arquivo encontrado, executando...
    python "{script_principal}"
    if errorlevel 1 (
        echo.
        echo ‚ùå Erro ao executar o programa!
        echo üí° Certifique-se que o Python est√° instalado corretamente.
        echo.
        pause
    )
) else (
    echo ‚ùå Erro: Arquivo principal n√£o encontrado!
    echo.
    echo üìÅ Esperado em: {script_principal}
    echo.
    echo üîß Solu√ß√µes:
    echo    1. Verifique se todos os arquivos est√£o na pasta correta
    echo    2. Execute novamente o instalador
    echo.
    pause
)
'''
            
            with open(bat_path, 'w', encoding='utf-8') as f:
                f.write(bat_content)
            
            self.log_message(f"‚úÖ Atalho .bat criado: {bat_path}")
            return True
            
        except Exception as e:
            self.log_message(f"‚ùå Erro ao criar atalho .bat: {e}")
            return False
    
    def criar_atalho_python(self):
        """Cria script Python direto como √∫ltima alternativa"""
        self.log_message("üêç Criando launcher Python...")
        
        try:
            pasta_atual = os.path.dirname(os.path.abspath(__file__))
            script_principal = os.path.join(pasta_atual, 'src', 'interface_apostas.py')
            
            # Tentar diferentes caminhos para √°rea de trabalho
            desktop_paths = [
                os.path.join(os.path.expanduser('~'), 'Desktop'),
                os.path.join(os.path.expanduser('~'), '√Årea de Trabalho'),
                pasta_atual  # Fallback para pasta do programa
            ]
            
            desktop = None
            for path in desktop_paths:
                if os.path.exists(path):
                    desktop = path
                    break
            
            py_path = os.path.join(desktop, "EXECUTAR_BET_BOOSTER.py")
            
            # Criar launcher Python
            launcher_content = f'''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ BET BOOSTER LAUNCHER
Launcher para o Sistema de An√°lise de Apostas
"""

import os
import sys
import subprocess

def main():
    print("üéØ BET BOOSTER LAUNCHER")
    print("=" * 40)
    
    # Caminho do script principal
    pasta_programa = r"{pasta_atual}"
    script_principal = r"{script_principal}"
    
    # Verificar se arquivo existe
    if not os.path.exists(script_principal):
        print("‚ùå Erro: Arquivo principal n√£o encontrado!")
        print(f"üìÅ Esperado: {{script_principal}}")
        input("Pressione Enter para sair...")
        return
    
    # Mudar para pasta do programa
    os.chdir(pasta_programa)
    print(f"üìÅ Pasta: {{pasta_programa}}")
    
    try:
        print("üöÄ Iniciando Bet Booster...")
        # Executar usando subprocess para melhor controle
        result = subprocess.run([sys.executable, script_principal], check=True)
        print("‚úÖ Programa executado com sucesso!")
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao executar: {{e}}")
        input("Pressione Enter para sair...")
    except KeyboardInterrupt:
        print("\\n‚èπÔ∏è  Execu√ß√£o cancelada pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {{e}}")
        input("Pressione Enter para sair...")

if __name__ == "__main__":
    main()
'''
            
            with open(py_path, 'w', encoding='utf-8') as f:
                f.write(launcher_content)
            
            self.log_message(f"‚úÖ Launcher Python criado: {py_path}")
            self.log_message("üí° Clique duplo no arquivo para executar")
            
        except Exception as e:
            self.log_message(f"‚ùå Erro ao criar launcher Python: {e}")
            # Criar pelo menos na pasta do programa
            try:
                py_path = os.path.join(pasta_atual, "EXECUTAR_BET_BOOSTER.py")
                with open(py_path, 'w', encoding='utf-8') as f:
                    f.write(launcher_content)
                self.log_message(f"‚úÖ Launcher criado na pasta do programa: {py_path}")
            except:
                self.log_message("‚ùå Falha cr√≠tica ao criar launcher")
    
    def finalizar_configuracao(self):
        """Finaliza a configura√ß√£o"""
        self.log_message("üéØ Finalizando configura√ß√£o...")
        self.log_message("‚úÖ Bet Booster instalado com sucesso!")
        self.log_message("üöÄ Pronto para usar!")
    
    def instalacao_concluida(self):
        """Exibe tela de instala√ß√£o conclu√≠da"""
        # Limpar tela
        for widget in self.root.winfo_children():
            widget.destroy()
        
        # Frame principal
        main_frame = tk.Frame(self.root, bg='#f0f0f0')
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # √çcone de sucesso e t√≠tulo
        success_label = ttk.Label(main_frame, text="üéâ", font=('Arial', 48))
        success_label.pack(pady=(20, 10))
        
        title_label = ttk.Label(main_frame, text="INSTALA√á√ÉO CONCLU√çDA!", style='Title.TLabel')
        title_label.pack()
        
        success_msg = ttk.Label(main_frame, text="Bet Booster foi instalado com sucesso!", style='Success.TLabel')
        success_msg.pack(pady=(10, 20))
        
        # Informa√ß√µes
        info_frame = tk.LabelFrame(main_frame, text="‚úÖ O que foi instalado:", 
                                 font=('Arial', 12, 'bold'), bg='#f0f0f0')
        info_frame.pack(fill='x', pady=(0, 20))
        
        info_text = """
‚Ä¢ ‚úÖ Sistema Bet Booster configurado
‚Ä¢ ‚úÖ Todas as depend√™ncias instaladas
‚Ä¢ ‚úÖ Atalho criado na √°rea de trabalho
‚Ä¢ ‚úÖ Ambiente pronto para uso

üöÄ Como usar:
1. Clique duplo no atalho "Bet Booster" na √°rea de trabalho
2. O programa abrir√° automaticamente
3. Comece a analisar suas apostas!
        """
        
        info_label = ttk.Label(info_frame, text=info_text, style='Body.TLabel', justify='left')
        info_label.pack(padx=20, pady=15)
        
        # Bot√µes finais
        buttons_frame = tk.Frame(main_frame, bg='#f0f0f0')
        buttons_frame.pack(side='bottom', pady=(20, 0))
        
        launch_btn = tk.Button(buttons_frame, text="üöÄ EXECUTAR AGORA", font=('Arial', 12, 'bold'),
                              bg=self.cores['success'], fg='white', padx=30, pady=10,
                              command=self.executar_programa)
        launch_btn.pack(side='left', padx=(0, 15))
        
        close_btn = tk.Button(buttons_frame, text="‚úÖ FINALIZAR", font=('Arial', 12, 'bold'),
                             bg=self.cores['primary'], fg='white', padx=30, pady=10,
                             command=self.root.quit)
        close_btn.pack(side='right')
    
    def instalacao_falhou(self, erro):
        """Exibe tela de erro na instala√ß√£o"""
        messagebox.showerror("Erro na Instala√ß√£o", 
                           f"Ocorreu um erro durante a instala√ß√£o:\n\n{erro}\n\n" +
                           "Por favor, tente novamente ou entre em contato com o suporte.")
        self.root.quit()
    
    def executar_programa(self):
        """Executa o programa principal"""
        try:
            pasta_atual = os.path.dirname(os.path.abspath(__file__))
            script_principal = os.path.join(pasta_atual, 'src', 'interface_apostas.py')
            
            if os.path.exists(script_principal):
                self.root.quit()
                os.system(f'python "{script_principal}"')
            else:
                messagebox.showerror("Erro", "Arquivo principal n√£o encontrado!")
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao executar programa: {e}")
    
    def run(self):
        """Inicia o instalador"""
        self.root.mainloop()

def main():
    """Fun√ß√£o principal"""
    try:
        print("üéØ BET BOOSTER - INSTALADOR OFICIAL")
        print("=" * 50)
        print("Inicializando instalador com interface gr√°fica...")
        print()
        
        # Verificar se est√° no Windows
        if os.name != 'nt':
            print("‚ö†Ô∏è  Este instalador foi desenvolvido para Windows")
            print("üí° No Linux/Mac, execute diretamente: python interface_apostas.py")
            input("Pressione Enter para continuar mesmo assim...")
        
        # Executar instalador
        installer = BetBoosterInstaller()
        installer.run()
        
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        print("üì¶ Algumas bibliotecas podem estar faltando")
        print("ÔøΩ Isso √© normal, o instalador tentar√° corrigir automaticamente")
        print()
        try:
            installer = BetBoosterInstaller()
            installer.run()
        except Exception as e2:
            print(f"‚ùå Erro cr√≠tico: {e2}")
            print("üîß Instale manualmente: pip install tkinter")
            input("Pressione Enter para sair...")
            
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        print("üîÑ Tentando executar mesmo assim...")
        try:
            installer = BetBoosterInstaller()
            installer.run()
        except:
            print("‚ùå Falha cr√≠tica no instalador")
            input("Pressione Enter para sair...")

if __name__ == "__main__":
    main()
